@page "/"
@attribute [Authorize]
@inject HttpClient Http

@if (tickets == null)
{
    <MudProgressCircular Color="Color.Success" Indeterminate="true" />
    <p>Loading</p>
}

@if (currentTicket == null && tickets != null)
{

    <MudContainer Class="mt-8 px-8" MaxWidth="MaxWidth.False">
        <MudGrid>
            <MudItem xs="12" sm="6" md="12">
                <MudPaper Elevation="2" Class="pa-4">
                    <MudTable Items="@tickets" Filter="new Func<Ticket,bool>(FilterFunc)">
                        <ToolBarContent>
                            <MudText Typo="Typo.h6"><MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="OnNew">New Ticket</MudButton></MudText>
                            <MudToolBarSpacer />
                            <MudTextField @bind-Value="search_string" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                        </ToolBarContent>
                        <HeaderContent>
                            <MudTh>Code</MudTh>
                            <MudTh>Title</MudTh>
                            <MudTh>Description</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Code">@context.Code</MudTd>
                            <MudTd DataLabel="Title">@context.Title</MudTd>
                            <MudTd DataLabel="Description">@context.Description</MudTd>
                        </RowTemplate>
                        <PagerContent>
                            <MudTablePager />
                        </PagerContent>
                    </MudTable>
                </MudPaper>
            </MudItem>

        </MudGrid>
    </MudContainer>
}

@if (currentTicket != null)
{
    <TicketDetail Detail="currentTicket" OnSave="OnSave" OnCancel="OnCancel" TicketPriorities ="ticketPriorities" TicketStatuses ="ticketStatuses" />
}



@code {

    private Ticket[] tickets;
    bool dense = false;
    bool hover = true;
    bool fixed_header = false;
    string search_string = "";

    Ticket currentTicket;

    private TicketPriority[] ticketPriorities;
    private TicketStatus[] ticketStatuses;


    protected override async Task OnInitializedAsync()
    {
        tickets = await Http.GetFromJsonAsync<Ticket[]>("https://localhost:44312/api/tickets");
    }

    bool FilterFunc(Ticket element)
    {
        if (string.IsNullOrWhiteSpace(search_string))
            return true;
        if (element.Code.Contains(search_string))
            return true;
        if (element.Title.Contains(search_string))
            return true;
        if (element.Description.Contains(search_string))
            return true;
        return false;
    }

    public async Task OnNew()
    {
        ticketStatuses = await Http.GetFromJsonAsync<TicketStatus[]>("https://localhost:44312/api/TicketStatus");
        ticketPriorities = await Http.GetFromJsonAsync<TicketPriority[]>("https://localhost:44312/api/TicketPriority");
        
        this.currentTicket = new Ticket()
        {
            TicketPriority =  new TicketPriority(){ID = ticketPriorities[0].ID },
            TicketStatus = new TicketStatus(){ID = ticketStatuses[0].ID}
        };
    }


    public void OnSave(Ticket customer)
    {
        //save

        this.currentTicket = null;
    }

    public void OnCancel()
    {
        this.currentTicket = null;
    }

}