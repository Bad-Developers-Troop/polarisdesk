@page "/ticketconf"
@inject HttpClient Http
@attribute [Authorize]

<h2>Ticket configuration</h2>

<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs="12" sm="6" md="4">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;">
                <h4>Ticket Priority</h4><br />
                @if (currentPriority == null && ticketPriority != null)
                {
                    @foreach (var priority in ticketPriority)
                    {
                        <p>@priority.Name</p>
                    }
                }
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;">
                <h4>Ticket Status</h4><br />
                @if (currentStatus == null && ticketStatuses != null)
                {
                    @foreach (var status in ticketStatuses)
                    {
                        <p>@status.Name</p>
                    }
                }
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="12" md="4">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;">
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

<br />

@code
{
    private TicketPriority[] ticketPriority;
    private TicketStatus[] ticketStatuses;

    private TicketPriority currentPriority;
    private TicketStatus currentStatus;

    protected override async Task OnInitializedAsync()
    {
        await ShowPriority();
        await ShowStatus();
    }


    private async Task ShowPriority()
    {
        currentPriority = null;
        ticketPriority = await Http.GetFromJsonAsync<TicketPriority[]>("https://localhost:44312/api/TicketPriority");
    }

    private async Task ShowStatus()
    {
        currentStatus = null;
        ticketStatuses = await Http.GetFromJsonAsync<TicketStatus[]>("https://localhost:44312/api/TicketStatus");
    }

}
